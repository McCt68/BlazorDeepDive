@* This is a routeble componet because it s a page ?? *@
@page "/servers"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<h3>Servers</h3>
<br />
<br />

@* classes are something I can use to refer to the same type of element I think *@
@* the classes used are from bootstrap *@
@* boostrap is a framework of html and css that can be used. they will look good on any device or screensize*@
<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)?"border-primary":"")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="@(() => {SelectCity(city);})">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<br />

@* Two way databinding to update the state. Using bind-value *@
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Servers"
    @bind-value=serverFilter
    @bind-value:event="oninput"/>
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>


<br />

@* Using the ServerComponent *@
@* Specifying rendermode here, and also in program in DI container, and middleware *@.
@* <ServerComponent @rendermode="InteractiveServer"></ServerComponent> *@


@* span is an inline container used for styling html. *@
<ul>
    @foreach (var server in servers)
    {
        <li>
            @server.Name in @server.City is
            <span style="color:@((server.IsOnline?"green" :"red"))">
                @(server.IsOnline ? "online" : "offline")
            </span>
            &nbsp;
            <a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
            &nbsp;
            <EditForm Model="server"
                      FormName="@($"form-server-{server.ServerId}")"
                      OnValidSubmit="@(()=> {DeleteServer(server.ServerId);})">
                <button type="submit" class="btn btn-primary">Delete Server</button>

            </EditForm>
        </li>
    }

</ul>
<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>


@code {
    // State variables.
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");

    private List<String> cities = CitiesRepository.GetCities();

    private string selectedCity = "Toronto";

    private string _serverFilter = "";

    // Two way databinding when the user change this from the UI the state will change -
    // or when the state is changed from the code behind file the value reflected in the UI will also change
    // this is done by using the bind-value atribute in the html file -
    // as that will trigger the onChange event behind the schenes.
    private string serverFilter
    {
        get => _serverFilter; set
        {
            _serverFilter = value;
            // Do something
            this.servers = ServersRepository.SearchServers(_serverFilter);
        }
    }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.Refresh(); // there was a bug here with earlier blazor, but it seems fixed now
        }
    }

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;
        this.servers = ServersRepository.GetServersByCity(this.selectedCity);
    }

    private void HandleSearch(MouseEventArgs e)
    {
        this.servers = ServersRepository.SearchServers(serverFilter);

        this.selectedCity = string.Empty;
    }
}
