@* This is a routeble componet because it s a page *@
@page "/servers"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<h3>Servers</h3>
<br />
<br />

@* classes are something I can use to refer to the same type of element I think *@
@* the classes used are from bootstrap *@
@* boostrap is a framework of html and css that can be used. they will look good on any device or screensize*@
<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)?"border-primary":"")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="@(() => {SelectCity(city);})">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<br />



@* Two way databinding to update the state. Using bind-value *@
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Servers"
           @bind-value=serverFilter
           @bind-value:event="oninput" />
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

<br />

@* Using the ServerComponent *@
@* Specifying rendermode here, and also in program in DI container, and middleware *@.
@* <ServerComponent @rendermode="InteractiveServer"></ServerComponent> *@
<ServerListComponent @rendermode="InteractiveServer"></ServerListComponent>

<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>


@code {
    

    private List<String> cities = CitiesRepository.GetCities();

    private string selectedCity = "Toronto";

    private string _serverFilter = "";

    // Two way databinding when the user change this from the UI the state will change -
    // or when the state is changed from the code behind file the value reflected in the UI will also change
    // this is done by using the bind-value atribute in the html file -
    // as that will trigger the onChange event behind the schenes.
    private string serverFilter
    {
        get => _serverFilter; set
        {
            _serverFilter = value;
            // Do something
            // this.servers = ServersRepository.SearchServers(_serverFilter);
        }
    }

    

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;
        // this.servers = ServersRepository.GetServersByCity(this.selectedCity);

        // if (cityName == "Halifax")
        // {
        //     for (int i = 16; i < 2000; i++) // using the actual servers list count instead of hardcoed integer value
        //                                     // for (int i = this.servers.Count; i < 2000; i++) // using the actual servers list count instead of hardcoed integer value
        //     {
        //         servers.Add(new Server { ServerId = i, Name = $"Server{i}", City = "Halifax" });
        //     }
        // }
    }

    private void HandleSearch(MouseEventArgs e)
    {
        // this.servers = ServersRepository.SearchServers(serverFilter);

        this.selectedCity = string.Empty;
    }
}
